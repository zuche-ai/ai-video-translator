# Production Dockerfile for video translator backend
FROM python:3.11-slim as base

# Install system dependencies including FFmpeg, build tools, and Rust
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libsndfile1 \
    libportaudio2 \
    portaudio19-dev \
    curl \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install production WSGI server
RUN pip install --no-cache-dir gunicorn

# Copy application code
COPY video_translator/ ./video_translator/
COPY docker/test_backend.py ./docker/
COPY docker/test_pytest.py ./docker/
COPY tests/ ./tests/

# Create directories for uploads and results with proper permissions
RUN mkdir -p /app/uploads /app/results /app/logs \
    && chown -R appuser:appuser /app

# Set environment variables for argostranslate
ENV ARGOS_TRANSLATE_PACKAGES_DIR=/app/.local/share/argos-translate/packages
ENV HOME=/app
ENV DOCKER_ENV=1

# Create argostranslate directory with proper permissions
RUN mkdir -p /app/.local/share/argos-translate/packages \
    && chown -R appuser:appuser /app/.local

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Run with gunicorn for production
CMD ["gunicorn", "--bind", "0.0.0.0:5001", "--workers", "2", "--timeout", "300", "--access-logfile", "/app/logs/access.log", "--error-logfile", "/app/logs/error.log", "video_translator.api:app"] 